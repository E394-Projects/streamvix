name: Sync Fork with Rebase

on:
  schedule:
    - cron: '0 0 * * *' # ogni giorno a mezzanotte (correggevo il cron)
  workflow_dispatch:

env:
  GH_PAT: ${{ secrets.EXTERNAL_REPO_PAT }}
  DEFAULT_BRANCH: main

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.EXTERNAL_REPO_PAT }}  # Usa il PAT invece del GITHUB_TOKEN
          fetch-depth: 0
          
      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Get upstream repository name dynamically
        id: upstream
        run: |
          echo "üì° Recupero info sul repository..."
          API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}"
          
          RESPONSE=$(curl -s -H "Authorization: token $GH_PAT" $API_URL)
          PARENT_FULL_NAME=$(echo "$RESPONSE" | jq -r '.parent.full_name // empty')
          if [[ -z "$PARENT_FULL_NAME" ]]; then
            echo "‚ùå Questa repository non √® un fork oppure il token non ha accesso all'upstream."
            exit 1
          fi
          echo "‚úÖ Upstream rilevato: $PARENT_FULL_NAME"
          echo "UPSTREAM_REPO=$PARENT_FULL_NAME" >> "$GITHUB_ENV"
          
      - name: Sync with upstream
        run: |
          echo "üîÑ Sincronizzazione con $UPSTREAM_REPO..."
          UPSTREAM_URL="https://${GH_PAT}@github.com/${UPSTREAM_REPO}.git"
          
          git remote add upstream "$UPSTREAM_URL" || git remote set-url upstream "$UPSTREAM_URL"
          git fetch upstream
          
          # Verifica se ci sono differenze
          if git diff --quiet HEAD upstream/${DEFAULT_BRANCH}; then
            echo "‚úÖ Il fork √® gi√† aggiornato"
            exit 0
          fi
          
          echo "üìù Rilevate differenze, tentativo di rebase..."
          
          # Tenta il rebase
          if git rebase upstream/${DEFAULT_BRANCH}; then
            echo "‚úÖ Rebase completato con successo"
          else
            echo "‚ö†Ô∏è Conflitti rilevati durante il rebase"
            echo "üîÑ Aborting rebase e usando strategia merge..."
            git rebase --abort
            
            # Strategia alternativa: merge invece di rebase
            if git merge upstream/${DEFAULT_BRANCH} -m "Sync with upstream: merge conflicts resolved automatically"; then
              echo "‚úÖ Merge completato con successo"
            else
              echo "‚ùå Conflitti non risolvibili automaticamente"
              echo "üìã Files in conflitto:"
              git status --porcelain | grep "^UU"
              
              # Tenta di risolvere conflitti comuni automaticamente
              echo "üîß Tentativo di risoluzione automatica..."
              
              # Per ogni file in conflitto, prendi la versione upstream
              git status --porcelain | grep "^UU" | cut -c4- | while read file; do
                echo "  - Accettando versione upstream per: $file"
                git checkout --theirs "$file"
                git add "$file"
              done
              
              # Verifica se ci sono ancora conflitti
              if git status --porcelain | grep -q "^UU"; then
                echo "‚ùå Alcuni conflitti non sono stati risolti"
                exit 1
              else
                echo "‚úÖ Conflitti risolti, completamento merge..."
                git commit -m "Sync with upstream: auto-resolved conflicts by accepting upstream changes"
              fi
            fi
          fi
          
      - name: Push changes to fork
        run: |
          echo "üì§ Pushing aggiornamenti al fork..."
          git push origin ${DEFAULT_BRANCH} --force-with-lease
